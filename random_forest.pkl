import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.metrics import classification_report, accuracy_score
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
import joblib

# Load data
df = pd.read_csv("restaurant_menu_optimization_data.csv")

# Encoding target
profit_map = {'Low': 0, 'Medium': 1, 'High': 2}
df['Profitability'] = df['Profitability'].map(profit_map)

# Fitur dan target
X = df[['Price', 'MenuCategory']]
y = df['Profitability']

# Preprocessor
preprocessor = ColumnTransformer([
    ('cat', OneHotEncoder(drop='first'), ['MenuCategory'])
], remainder='passthrough')

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, stratify=y, random_state=42
)

# Model kandidat
models = {
    "Decision Tree": DecisionTreeClassifier(random_state=42),
    "Random Forest": RandomForestClassifier(random_state=42),
    "Logistic Regression": LogisticRegression(max_iter=1000)
}

best_model = None
best_score = 0
best_name = ""

# Evaluasi semua model
for name, model in models.items():
    pipeline = Pipeline(steps=[
        ('preprocess', preprocessor),
        ('model', model)
    ])
    
    pipeline.fit(X_train, y_train)
    y_pred = pipeline.predict(X_test)
    acc = accuracy_score(y_test, y_pred)
    
    print(f"\n===== {name} =====")
    print(f"Akurasi: {acc:.4f}")
    print(classification_report(y_test, y_pred))
    
    # Simpan jika ini model terbaik
    if acc > best_score:
        best_score = acc
        best_model = pipeline
        best_name = name

print(f"\nModel terbaik: {best_name} dengan akurasi {best_score:.4f}")

# Simpan model terbaik
joblib.dump(best_model, "model.pkl")
print("Model terbaik disimpan sebagai model.pkl")
